name: Deploy Magnifibot
on:
  workflow_dispatch:
  pull_request:
    paths:
      - '**.go'
      - serverless.yml
      - .github/workflows/deploy-stage.yml
      - '!main.go'
      - go.*
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.6
      - name: Test the project
        run: |
          go test ./...
      - name: Build the project
        run: |
          rm -rf ./bin ./vendor
          export GO111MODULE=on
          env GOARCH=amd64 GOOS=linux go build -ldflags="-s -w" -o bin/handletelegram HandleTelegramCommands/main.go
          env GOARCH=amd64 GOOS=linux go build -ldflags="-s -w" -o bin/getgospelandnotify GetGospelAndNotify/main.go
          env GOARCH=amd64 GOOS=linux go build -ldflags="-s -w" -o bin/sendgospel SendGospel/main.go
      - name: Deploy the project in stage environment
        uses: serverless/github-action@v3
        with:
          args: deploy -r eu-west-3 -s stage --verbose
        env:
          AWS_ACCESS_KEY_ID: AKIARRPNAYUPHK3U2KF4
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      - name: Get Lambda endpoint
        id: deploy
        run: |
          echo "::set-output name=endpoint::$(aws apigatewayv2 get-apis --query "Items[?Name=='magnifibot'].ApiEndpoint" --output text)$(aws apigatewayv2 get-routes --api-id $(aws apigatewayv2 get-apis --query "Items[?Name=='magnifibot'].ApiId" --output text) --query "Items[0].RouteKey" --output text | cut -d" " -f2)"
        env:
          AWS_ACCESS_KEY_ID: AKIARRPNAYUPHK3U2KF4
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_DEFAULT_REGION: eu-west-3
      - name: Set Telegram Webhook
        id: telegramWebhook
        uses: fjogeleit/http-request-action@v1.9.0
        with:
          url: https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN_STAGE }}/setWebhook
          method: 'POST'
          contentType: application/json
          data: '{"url":"${{ steps.deploy.outputs.endpoint }}","allowed_updates":["message","channel_post"]}'
      - name: Show response from Telegram API
        run: |
          echo ${{ steps.telegramWebhook.outputs.response }}
