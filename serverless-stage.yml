service: magnifibot
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  stage: stage
  runtime: go1.x

  memorySize: 128
  timeout: 3
  logRetentionInDays: 3
  region: eu-west-3

  environment:
    MAGNIFIBOT_VERBOSE: "true"
    MAGNIFIBOT_SQS_QUEUE_NAME: magnifibot-stage
    MAGNIFIBOT_TELEGRAM_BOT_TOKEN: ${ssm:MAGNIFIBOT_STAGE_TELEGRAM_TOKEN}
    MAGNIFIBOT_DYNAMODB_USER_TABLE: MagnifibotUserStage
    MAGNIFIBOT_TIMEOUT: 5s

  httpApi:
    name: magnifibot-stage

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
          Resource:
            - Fn::Join:
                - ""
                - arn:aws:dynamodb:eu-west-3:106260645150:table/MagnifibotUserStage
        - Effect: "Allow"
          Action:
            - "sqs:DeleteMessage"
            - "sqs:GetQueueUrl"
            - "sqs:ReceiveMessage"
            - "sqs:SendMessage"
          Resource:
            - Fn::Join:
                - ""
                - arn:aws:sqs:eu-west-3:106260645150:magnifibot-stage

functions:
  handletelegramstage:
    handler: bin/handletelegram
    events:
      - httpApi:
          method: POST
          path: /GAsh3tZnp32jiueiG7eHti9ktnAzgM7tUfQaaHfZcHwLEApxhiQU7BtHjs
  getgospelandnotifystage:
    handler: bin/getgospelandnotify
    timeout: 5
    events:
      - schedule:
          name: get_gospel_and_notify_stage
          enabled: true
          description: Get Gospel every day at 5am UTC
          # rate: cron(0 5 * * ? *) # every day at 5am UTC
          rate: rate(1 minute)
  sendgospelstage:
    handler: bin/sendgospel
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - Messages
              - Arn
          batchSize: 20
          maximumBatchingWindow: 20
          functionResponseType: ReportBatchItemFailures

package:
  patterns:
    - '!./**'
    - ./bin/**

resources:
  Resources:
    User:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MagnifibotUserStage
        AttributeDefinitions:
          - AttributeName: ChatID
            AttributeType: "N"
        KeySchema:
          - AttributeName: ChatID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    Messages:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: magnifibot-stage
        MessageRetentionPeriod: 72000 # 20 hours
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 30 # seconds

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
